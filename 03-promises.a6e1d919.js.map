{"mappings":"AAoBA,SAASA,EAAcC,EAAUC,GACjC,OAAO,IAAIC,SAAS,CAACC,EAASC,KAC9BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,uBAAqBH,QAAiBC,OAE5CG,EAAK,sBAAoBJ,QAAeC,MAAU,GAErDA,EAAM,G,CA3BIO,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMX,MAAEA,EAAKY,KAAEA,EAAIC,OAAEA,GAAUH,EAAMI,cAAcC,SAEnDX,YAAY,KACV,IAAK,IAAIY,EAAI,EAAGA,IAAMH,EAAOI,MAAOD,IAClClB,EAAckB,EAAIJ,EAAKK,MAAQD,GAC9BE,MAAKC,GAAQC,QAAQC,IAAIF,KACzBG,OAAMC,GAASH,QAAQC,IAAIE,IAAO,IAEnCvB,EAAMiB,M","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n\nconst form = document.querySelector(\".form\");\n\nform.addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const { delay, step, amount} = event.currentTarget.elements;\n\n  setTimeout (() => {\n    for (let i = 1; i <= +amount.value; i++) {\n      createPromise(i, (step.value * i))\n      .then(data => console.log(data))\n      .catch(error => console.log(error))\n    }\n  }, +delay.value)\n}\n\nfunction createPromise(position, delay) {\nreturn new Promise ((resolve, reject) => {\nsetTimeout(() => {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  } else {\n    reject(`❌ Rejected promise ${position} in ${delay}ms`);\n  }\n}, delay)\n})\n\n}\n\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","step","amount","currentTarget","elements","i","value","then","data","console","log","catch","error"],"version":3,"file":"03-promises.a6e1d919.js.map"}